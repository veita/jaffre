
plugins {
	id 'java-library'
	id 'jacoco'
	id 'maven-publish'
}


group       = 'org.jaffre'
version     = '1.0.0-SNAPSHOT'
description = 'jaffre'

ext.buildCommit    = 'git describe --always --tags --dirty=-dirty'.execute().text.trim()
ext.buildTimestamp = java.time.format.DateTimeFormatter.ISO_INSTANT.format(java.time.Instant.now())
ext.buildJdk       = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"


sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
	mavenCentral()
}


dependencies {
	api group: 'org.slf4j',           name: 'slf4j-api',      version: '1.7.+'
	api group: 'org.springframework', name: 'spring-core',    version: '5.2.+'
	api group: 'org.springframework', name: 'spring-context', version: '5.2.+'

	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.+'

	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.+'
}


test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required  =  true
		html.required = true
		csv.required  = false
	}
}

jar {
	manifest {
		from('src/main/resources/META-INF/MANIFEST.MF')
		attributes(
			'Specification-Title':    'jaffre',
			'Specification-Version':  '1.0',
			'Implementation-Title':   project.name,
			'Implementation-Version': archiveVersion.get(),
			'Build-Revision':         buildCommit,
			'Build-Timestamp':        buildTimestamp,
			'Build-Jdk':              buildJdk
			)
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

